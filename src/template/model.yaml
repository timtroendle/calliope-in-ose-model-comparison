import:
    - './interest-rate.yaml'
    - './renewable-techs.yaml'
    - './locations.yaml'
    - './link-techs.yaml'
    - './storage-techs.yaml'
    - './links.yaml'
    - './capacity.yaml'
    - './legacy-tech.yaml'
    - './renewable-shares.yaml'
overrides:
    diw_assumptions:
        techs.battery.energy_eff: 0.9591663046625439  # 0.9592 * 0.9592 ~ 0.92 round trip efficiency {Schmidt et al. 2017}
        techs.battery.costs.monetary.interest_rate: 0.04 # {own assumption}
        techs.battery.costs.monetary.om_annual: 0  # {own_assumptions}
        techs.battery.costs.monetary.om_prod: 0  # {own_assumptions}
        techs.nuclear.costs.monetary.om_con: 16.9 # €/Mh
        techs.lignite.costs.monetary.om_con: 39.6 # €/MWh
        techs.coal.costs.monetary.om_con: 97.2 # €/MWh
        techs.ccgt.costs.monetary.om_con: 316.8 # €/MWh
        techs.nuclear.costs.monetary.om_prod: 0.36 # €/MWh (0.03 € / kg CO2eq) * (12 kg CO2eq/MWh)
        techs.lignite.costs.monetary.om_prod: 27.3 # €/MWh (0.03 € / kg CO2eq) * (910 kg CO2eq/MWh)
        techs.coal.costs.monetary.om_prod: 24.6 # €/MWh (0.03 € / kg CO2eq) * (820 kg CO2eq/MWh)
        techs.ccgt.costs.monetary.om_prod: 14.7 # €/MWh (0.03 € / kg CO2eq) * (490 kg CO2eq/MWh)
    diw_battery_baseline_cost:
        techs.battery.costs.monetary.energy_cap: 135140 # EUR per MW {Schmidt et al. 2017 and own assumptions}
        techs.battery.costs.monetary.storage_cap: 315320 # EUR per MWh Schmidt et al. 2017 and own assumptions capacity
    diw_battery_low_cost:
        techs.battery.costs.monetary.energy_cap: 67570 # EUR per MW
        techs.battery.costs.monetary.storage_cap: 157660 # EUR per MWh
scenarios:
    baseline: ["diw_assumptions", "diw_battery_baseline_cost"]
    low-cost: ["diw_assumptions", "diw_battery_low_cost"]
model:
    name: 'Open Source Modelling -- Euro Calliope model'
    timeseries_data_path: './'
    subset_time: ['{{ config.from_date }}', '{{ config.to_date }}']
    {% if config.resolution != "1H" %}
    time:
        function: resample
        function_options: {'resolution': '{{ config.resolution }}'}
    {% endif %}
run:
    solver: gurobi
    solver_io: python
    mode: plan
    solver_options:
        Threads: 4
techs:
    demand_elec:
        essentials:
            name: 'Electricity demand'
            parent: demand
            carrier: electricity
        constraints:
            resource: file=electricity-demand.csv
    ac_transmission:
        essentials:
            name: "High voltage AC transmission line"
            parent: transmission
            carrier: electricity
        constraints:
            energy_eff: 1.0 # TODO really?
